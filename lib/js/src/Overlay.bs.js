// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/lib/js/src/Css.js");
var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var ReactDom = require("react-dom");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var component = ReasonReact.statelessComponent("Overlay");

function getRootEl(rootId) {
  return document.getElementById(rootId);
}

var mount = document.createElement("div");

var appendMount = (
  function (parentId, mount) {
    if (typeof document !== "undefined") {
      console.log(parentId)
    }
  }
);

function make($staropt$star, isActive, style, className, children) {
  var rootId = $staropt$star !== undefined ? $staropt$star : "root";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */(function () {
              return Curry._3(appendMount, rootId, mount, /* () */0);
            }),
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */(function () {
              return /* () */0;
            }),
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              if (isActive) {
                return ReactDom.createPortal(ReactDOMRe.createElementVariadic("div", {
                                className: "component-overlay " + ((
                                    className !== undefined ? className + " " : ""
                                  ) + Css.style(/* :: */[
                                        Css.display(/* block */888960333),
                                        /* [] */0
                                      ])),
                                style: style !== undefined ? Js_primitive.valFromOption(style) : { }
                              }, children), document.getElementById(rootId));
              } else {
                return React.createElement("span", undefined, "NOPE");
              }
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(Js_primitive.nullable_to_opt(jsProps.rootId), jsProps.isActive, Js_primitive.nullable_to_opt(jsProps.style), Js_primitive.nullable_to_opt(jsProps.className), jsProps.children);
      }));

exports.component = component;
exports.getRootEl = getRootEl;
exports.mount = mount;
exports.appendMount = appendMount;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
