// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Css = require("bs-css/lib/js/src/Css.js");
var ReactDOMRe = require("reason-react/lib/js/src/ReactDOMRe.js");
var StyleUtils = require("./StyleUtils.bs.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");

var component = ReasonReact.statelessComponent("Button");

var rippleOut = Css.keyframes(/* :: */[
      /* tuple */[
        100,
        /* :: */[
          Css.top(Css.px(-12)),
          /* :: */[
            Css.right(Css.px(-12)),
            /* :: */[
              Css.bottom(Css.px(-12)),
              /* :: */[
                Css.left(Css.px(-12)),
                /* :: */[
                  Css.opacity(0.0),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ],
      /* [] */0
    ]);

function hoverProps(hoverStyle, hoverBaseColor, hoverTextColor) {
  if (hoverStyle === "ripple") {
    return /* :: */[
            Css.transformOrigin(/* `percent */[
                  -119887163,
                  50.0
                ], /* `percent */[
                  -119887163,
                  50.0
                ]),
            /* :: */[
              Css.position(/* relative */903134412),
              /* :: */[
                Css.after(/* :: */[
                      Css.transition(300, undefined, undefined, "border"),
                      /* :: */[
                        StyleUtils.pseudoContent(" "),
                        /* :: */[
                          Css.position(/* absolute */-1013592457),
                          /* :: */[
                            Css.border(Css.px(1), /* solid */12956715, Css.rgba(0, 0, 0, 0.0)),
                            /* :: */[
                              StyleUtils.cssInherit("borderRadius"),
                              /* :: */[
                                StyleUtils.cssInherit("borderColor"),
                                /* :: */[
                                  Css.top(Css.px(-1)),
                                  /* :: */[
                                    Css.right(Css.px(-1)),
                                    /* :: */[
                                      Css.bottom(Css.px(-1)),
                                      /* :: */[
                                        Css.left(Css.px(-1)),
                                        /* [] */0
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]),
                /* :: */[
                  Css.selector(" &:hover, &:focus", /* :: */[
                        Css.textDecoration(/* none */-922086728),
                        /* :: */[
                          Css.color(hoverTextColor),
                          /* :: */[
                            Css.selector("> *", /* :: */[
                                  Css.color(hoverTextColor),
                                  /* [] */0
                                ]),
                            /* :: */[
                              Css.backgroundColor(hoverBaseColor),
                              /* :: */[
                                Css.after(/* :: */[
                                      Css.animationName(rippleOut),
                                      /* :: */[
                                        Css.animationDuration(500),
                                        /* [] */0
                                      ]
                                    ]),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]),
                  /* [] */0
                ]
              ]
            ]
          ];
  } else {
    return /* :: */[
            Css.textDecoration(/* none */-922086728),
            /* :: */[
              Css.selector(" &:hover, &:focus", /* :: */[
                    Css.color(hoverTextColor),
                    /* :: */[
                      Css.selector("> *", /* :: */[
                            Css.color(hoverTextColor),
                            /* [] */0
                          ]),
                      /* :: */[
                        Css.backgroundColor(hoverBaseColor),
                        /* :: */[
                          Css.borderColor(hoverBaseColor),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]),
              /* [] */0
            ]
          ];
  }
}

function conditionalStyles(hoverStyle, hoverBaseColor, inverseStyle, textColor, baseColor, inverse, hoverTextColor) {
  if (inverse) {
    if (inverseStyle === "transparent") {
      return /* :: */[
              Css.backgroundColor(Css.rgba(255, 255, 255, 0.0)),
              /* :: */[
                Css.color(baseColor),
                /* :: */[
                  Css.transition(300, undefined, undefined, "all"),
                  /* :: */[
                    Css.selector(" *", /* :: */[
                          Css.color(baseColor),
                          /* :: */[
                            Css.transition(300, undefined, undefined, "all"),
                            /* [] */0
                          ]
                        ]),
                    hoverProps(hoverStyle, hoverBaseColor, hoverTextColor)
                  ]
                ]
              ]
            ];
    } else {
      return /* :: */[
              Css.backgroundColor(textColor),
              /* :: */[
                Css.color(baseColor),
                /* :: */[
                  Css.transition(300, undefined, undefined, "all"),
                  /* :: */[
                    Css.selector(" *", /* :: */[
                          Css.color(baseColor),
                          /* :: */[
                            Css.transition(300, undefined, undefined, "all"),
                            /* [] */0
                          ]
                        ]),
                    hoverProps(hoverStyle, hoverBaseColor, hoverTextColor)
                  ]
                ]
              ]
            ];
    }
  } else {
    return /* :: */[
            Css.backgroundColor(baseColor),
            /* :: */[
              Css.color(textColor),
              /* :: */[
                Css.transition(300, undefined, undefined, "all"),
                /* :: */[
                  Css.selector(" *", /* :: */[
                        Css.color(textColor),
                        /* :: */[
                          Css.transition(300, undefined, undefined, "all"),
                          /* [] */0
                        ]
                      ]),
                  hoverProps(hoverStyle, hoverBaseColor, hoverTextColor)
                ]
              ]
            ]
          ];
  }
}

function make(baseColor, textColor, $staropt$star, $staropt$star$1, $staropt$star$2, className, hoverBaseColor, hoverTextColor, style, children) {
  var inverse = $staropt$star !== undefined ? $staropt$star : false;
  var inverseStyle = $staropt$star$1 !== undefined ? $staropt$star$1 : "default";
  var hoverStyle = $staropt$star$2 !== undefined ? $staropt$star$2 : "default";
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReactDOMRe.createElementVariadic("button", {
                          className: "component-button " + ((
                              className !== undefined ? className + " " : ""
                            ) + Css.style(/* :: */[
                                  Css.textDecoration(/* none */-922086728),
                                  /* :: */[
                                    Css.cursor(/* pointer */-786317123),
                                    /* :: */[
                                      Css.borderColor(StyleUtils.color_of_rgba(baseColor)),
                                      /* :: */[
                                        Css.selector(" a", /* :: */[
                                              Css.textDecoration(/* none */-922086728),
                                              /* [] */0
                                            ]),
                                        /* :: */[
                                          Css.selector("> *", /* :: */[
                                                Css.margin(Css.px(0)),
                                                /* :: */[
                                                  Css.padding(Css.px(0)),
                                                  /* :: */[
                                                    Css.textDecoration(/* none */-922086728),
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]),
                                          conditionalStyles(hoverStyle, hoverBaseColor !== undefined ? StyleUtils.color_of_rgba(Js_primitive.valFromOption(hoverBaseColor)) : StyleUtils.color_of_rgba(baseColor), inverseStyle, StyleUtils.color_of_rgba(textColor), StyleUtils.color_of_rgba(baseColor), inverse, hoverTextColor !== undefined ? StyleUtils.color_of_rgba(Js_primitive.valFromOption(hoverTextColor)) : StyleUtils.color_of_rgba(textColor))
                                        ]
                                      ]
                                    ]
                                  ]
                                ])),
                          style: style !== undefined ? Js_primitive.valFromOption(style) : { }
                        }, children);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.baseColor, jsProps.textColor, jsProps.inverse, jsProps.inverseStyle, jsProps.hoverStyle, Js_primitive.nullable_to_opt(jsProps.className), Js_primitive.nullable_to_opt(jsProps.hoverBaseColor), undefined, Js_primitive.nullable_to_opt(jsProps.style), jsProps.children);
      }));

exports.component = component;
exports.rippleOut = rippleOut;
exports.hoverProps = hoverProps;
exports.conditionalStyles = conditionalStyles;
exports.make = make;
exports.$$default = $$default;
exports.default = $$default;
exports.__esModule = true;
/* component Not a pure module */
