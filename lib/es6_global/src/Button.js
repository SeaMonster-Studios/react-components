// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE

import * as Css from "../../../node_modules/bs-css/lib/es6_global/src/Css.js";
import * as React from "react";
import * as Js_mapperRt from "../../../node_modules/bs-platform/lib/es6/js_mapperRt.js";
import * as ReasonReact from "../../../node_modules/reason-react/lib/es6_global/src/ReasonReact.js";
import * as Js_primitive from "../../../node_modules/bs-platform/lib/es6/js_primitive.js";
import * as StyleUtils$ReactTemplate from "./StyleUtils.js";

var component = ReasonReact.statelessComponent("Button");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    465819841,
    "default"
  ],
  /* tuple */[
    582626130,
    "transparent"
  ]
];

function inverseStyleToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray);
}

function inverseStyleFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray, param);
}

var jsMapperConstantArray$1 = /* array */[
  /* tuple */[
    -736146512,
    "ripple"
  ],
  /* tuple */[
    465819841,
    "default"
  ]
];

function hoverEffectToJs(param) {
  return Js_mapperRt.binarySearch(2, param, jsMapperConstantArray$1);
}

function hoverEffectFromJs(param) {
  return Js_mapperRt.revSearch(2, jsMapperConstantArray$1, param);
}

var rippleOut = Css.keyframes(/* :: */[
      /* tuple */[
        100,
        /* :: */[
          Css.top(Css.px(-12)),
          /* :: */[
            Css.right(Css.px(-12)),
            /* :: */[
              Css.bottom(Css.px(-12)),
              /* :: */[
                Css.left(Css.px(-12)),
                /* :: */[
                  Css.opacity(0.0),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ],
      /* [] */0
    ]);

function hoverProps(hoverEffect, hoverBaseColor, textColor, baseColor, inverse) {
  if (hoverEffect >= 465819841) {
    return /* :: */[
            Css.transformOrigin(/* `percent */[
                  -119887163,
                  50.0
                ], /* `percent */[
                  -119887163,
                  50.0
                ]),
            /* :: */[
              Css.position(/* relative */903134412),
              /* :: */[
                Css.after(/* :: */[
                      Css.position(/* absolute */-1013592457),
                      /* :: */[
                        Css.border(Css.px(1), /* solid */12956715, Css.rgba(0, 0, 0, 0.0)),
                        /* :: */[
                          Css.top(Css.px(-1)),
                          /* :: */[
                            Css.right(Css.px(-1)),
                            /* :: */[
                              Css.bottom(Css.px(-1)),
                              /* :: */[
                                Css.left(Css.px(-1)),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]),
                /* :: */[
                  Css.selector(" &:hover, &:focus", /* :: */[
                        Css.textDecoration(/* none */-922086728),
                        /* :: */[
                          Css.color(textColor),
                          /* :: */[
                            Css.backgroundColor(baseColor),
                            /* :: */[
                              Css.after(/* :: */[
                                    Css.animationName(rippleOut),
                                    /* :: */[
                                      Css.animationDuration(5000),
                                      /* [] */0
                                    ]
                                  ]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]),
                  /* [] */0
                ]
              ]
            ]
          ];
  } else {
    return /* :: */[
            Css.textDecoration(/* none */-922086728),
            /* :: */[
              Css.selector(" &:hover, &:focus", /* :: */[
                    Css.color(textColor),
                    /* :: */[
                      Css.backgroundColor(inverse ? baseColor : hoverBaseColor),
                      /* :: */[
                        Css.borderColor(inverse ? baseColor : hoverBaseColor),
                        /* [] */0
                      ]
                    ]
                  ]),
              /* [] */0
            ]
          ];
  }
}

function conditionalStyles(hoverEffect, hoverBaseColor, inverseStyle, textColor, baseColor, inverse) {
  if (inverse) {
    if (inverseStyle >= 582626130) {
      return /* :: */[
              Css.backgroundColor(Css.rgba(255, 255, 255, 0.0)),
              /* :: */[
                Css.color(baseColor),
                hoverProps(hoverEffect, hoverBaseColor, textColor, baseColor, inverse)
              ]
            ];
    } else {
      return /* :: */[
              Css.backgroundColor(textColor),
              /* :: */[
                Css.color(baseColor),
                hoverProps(hoverEffect, hoverBaseColor, textColor, baseColor, inverse)
              ]
            ];
    }
  } else {
    return /* :: */[
            Css.backgroundColor(baseColor),
            /* :: */[
              Css.color(textColor),
              /* [] */0
            ]
          ];
  }
}

function make(baseColor, textColor, $staropt$star, $staropt$star$1, $staropt$star$2, hoverBaseColor, children) {
  var inverse = $staropt$star !== undefined ? $staropt$star : false;
  var inverseStyle = $staropt$star$1 !== undefined ? $staropt$star$1 : /* default */465819841;
  var hoverEffect = $staropt$star$2 !== undefined ? $staropt$star$2 : /* default */465819841;
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return React.createElement("button", {
                          className: "component-button " + Css.style(/* :: */[
                                Css.textDecoration(/* none */-922086728),
                                /* :: */[
                                  Css.cursor(/* pointer */-786317123),
                                  /* :: */[
                                    Css.borderColor(StyleUtils$ReactTemplate.color_of_rgba(baseColor)),
                                    /* :: */[
                                      Css.selector("> *", /* :: */[
                                            Css.margin(Css.px(0)),
                                            /* :: */[
                                              Css.padding(Css.px(0)),
                                              /* :: */[
                                                Css.textDecoration(/* none */-922086728),
                                                /* [] */0
                                              ]
                                            ]
                                          ]),
                                      conditionalStyles(hoverEffect, hoverBaseColor !== undefined ? StyleUtils$ReactTemplate.color_of_rgba(Js_primitive.valFromOption(hoverBaseColor)) : StyleUtils$ReactTemplate.color_of_rgba(textColor), inverseStyle, StyleUtils$ReactTemplate.color_of_rgba(textColor), StyleUtils$ReactTemplate.color_of_rgba(baseColor), inverse)
                                    ]
                                  ]
                                ]
                              ])
                        }, children);
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var $$default = ReasonReact.wrapReasonForJs(component, (function (jsProps) {
        return make(jsProps.baseColor, jsProps.textColor, jsProps.inverse, jsProps.inverseStyle, jsProps.hoverEffect, Js_primitive.some(jsProps.hoverBaseColor), jsProps.children);
      }));

export {
  component ,
  inverseStyleToJs ,
  inverseStyleFromJs ,
  hoverEffectToJs ,
  hoverEffectFromJs ,
  rippleOut ,
  hoverProps ,
  conditionalStyles ,
  make ,
  $$default ,
  $$default as default,
  
}
/* component Not a pure module */
